This is a text file contains Java programing material

The java.io library defines four abstract classes that are the parents of all I/O stream
classes defined within the API: InputStream, OutputStream, Reader, and Writer.
The constructors of high-level
I/O streams often take a reference to the abstract class. For
example, BufferedWriter takes a Writer object as input, which allows it to take any subclass
of Writer.
One common area where the exam likes to play tricks on you is mixing and matching I/O
stream classes that are not compatible with each other. For example, take a look at each of
the following examples and see whether you can determine why they do not compile:
new BufferedInputStream(new FileReader("z.txt")); // DOES NOT COMPILE
new BufferedWriter(new FileOutputStream("z.txt")); // DOES NOT COMPILE
new ObjectInputStream(
new FileOutputStream("z.txt")); // DOES NOT COMPILE
new BufferedInputStream(new InputStream()); // DOES NOT COMPILE
The first two examples do not compile because they mix Reader/Writer classes with
InputStream/OutputStream classes, respectively. The third example does not compile
because we are mixing an OutputStream with an InputStream. Although it is possible
to read data from an InputStream and write it to an OutputStream, wrapping the I/O

stream is not the way to do so. As you see later in this chapter, the data must be copied over.
Finally, the last example does not compile because InputStream is an abstract class, and
therefore you cannot create an instance of it.
Decoding I/O Class Names
Pay close attention to the name of the I/O class on the exam, as decoding it often gives
you context clues as to what the class does. For example, without needing to look it up,
it should be clear that FileReader is a class that reads data from a file as characters or
strings. Furthermore, ObjectOutputStream sounds like a class that writes object data to a
byte stream.
